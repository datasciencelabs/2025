---
title: "Vectorization"
keywords: "R"
date: 2024-09-18
format:
  revealjs:
    theme: night
execute: 
  echo: true
---


## Vectorization 

* We will be using the `murders` dataset in the **dslabs** package.

* Includes data on 2010 gun murders for the US 50 states and DC. 

* We will use it to answer questions such as "What is the state with lowest crime rate in the Western part of the US?"

---

## Vectorization

* First, some simple examples of vectorization.

* Let's convert the following heights in inches to meters:

```{r}
heights <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)
```

* Rather than loop we use vectorization:

```{r}
heights*2.54/100
```

---

## Vectorization

* We can subtract a constant from each element of a vector.

* This is convenient for computing residuals or deviations from an average:

```{r}
avg <- mean(heights)
heights - avg 
```

---

## Vectorization

* This means we can compute standard units like this:

```{r}
s <- sd(heights)
(heights - avg)/s
```

* There is actually a function, `scale`, that does this. We describe it soon.

---

## Vectorization

* If we operate on two vectors, vectorization is componentwise.

* Here is an example:

```{r}
heights <- c(69, 62, 66, 70, 70, 73, 67, 73, 67, 70)
error <- rnorm(length(heights), 0, 0.1)
heights + error
```

---

## Exercise


* Add a column to the murders dataset with the murder rate.

* Use murders per 100,000 persons as the unit.

---


## Functions that vectorize

* Most arithmetic functions work on vectors.

```{r}
x <- 1:10
sqrt(x)
log(x)
2^x
```

---

## Functions that vectorize

```{r}
scale(heights)
```

provides the same results, 

```{r}
(heights - mean(heights))/sd(heights)
```

---

## Functions that vectorize

* But `scale` coerces to  a column matrix:

```{r}
class(scale(heights))
```

---

## Most functions vectorize

* Functions such as `any` and `all`, covert vectors to logicals of length one needed for `if`-`else`.

* A particularly useful function is a  vectorized version `ifelse`. 

* Here is an example:

```{r}
a <- c(0, 1, 2, -4, 5)
ifelse(a > 0, 1/a, NA)
```

---

## Subsetting

* Indexing with a logical vector subsets to the set corresponding to the `TRUE` values

```{r}
library(dslabs)
ind <- murders$population < 10^6
```

* A convenient aspect of this is that you can subset a vector using this logical vector for indexing:

```{r}
murders$state[ind]
```

---

## Indexing


* You can also use vectorization to apply logical operators:

```{r}
ind <- murders$population < 10^6 & murders$region == "West"
murders$state[ind]
```

---

## `split`

* `split` is a useful function to get indexes using a factor:

```{r}
inds <- with(murders, split(seq_along(region), region))
murders$state[inds$West]
```

---

## Functions for subsetting

* The functions `which`, `match` and the operator `%in%` are 
useful for sub-setting

* To understand how they work it's best to use examples.


---

## which

```{r}
ind <- which(murders$state == "California")
ind
murders[ind,]
```

---

## match

```{r}
ind <- match(c("New York", "Florida", "Texas"), murders$state)
ind
murders[ind,]
```

---

##  %in%


```{r}
ind <- which(murders$state %in% c("New York", "Florida", "Texas"))
ind
murders[ind,]
```

* Note this is similar to using match. 

* But note the order is different.

---

## match versus %in%

```{r}
c("Boston", "Dakota", "Washington") %in% murders$state
```

```{r}
match(c("Boston", "Dakota", "Washington"), murders$state)
```

```{r}
match(murders$state, c("Boston", "Dakota", "Washington"))
```


## The apply functions

* `sapply` - apply the function and simplify if possible

* `apply` - applies function to rows or columns o matrix.
    
* `lapply` - returns a list. Convenient when the function returns something other than a number.
    
* `tapply` - can apply to subsets defined by second variable.
    
* `mapply` - multivector version of `sapply`.

## Apply Examples

```{r}
 mm = matrix(1:10, nc=2, byrow=T)
 apply(mm, 1, sum)
 apply(mm, 2, \(x) x^2)
 
```

## Split Example
 
```{r }
sp1 = split(murders$population, murders$region)
lapply(sp1, sum)
```